<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android Bundle容器</title>
      <link href="/2020/07/06/Android%20Bundle%E5%AE%B9%E5%99%A8/"/>
      <url>/2020/07/06/Android%20Bundle%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Android Bundle容器</span><br><span class="line">date: 2020-07-06 09:07:20</span><br><span class="line">tags: android</span><br></pre></td></tr></table></figure><h1 id="Android-Bundle容器"><a href="#Android-Bundle容器" class="headerlink" title="Android Bundle容器"></a>Android Bundle容器</h1><blockquote><p>凡走过，必留下痕迹。</p></blockquote><p>介绍：类似于Map的Key-value的形式，实现了Parcelable</p><p>作用：Bundle 与Intent 一样，都可以在Activity、Fragment中传递数据。</p><p>场景：</p><p>Activity的onSaveInstanceState(Bundle outState)</p><p>Activity的onCreate(Bundle saveInstanceState)</p><p>Fragment的argment属性</p><p>Message的setData、获取：meg.getData.getString(“key”)</p><p>Intent.putExtras(Bundle bundle)</p><p>清楚数据：clear()</p><p>例子：</p><p>第一种写法，用于批量添加数据到Intent：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent();</span><br><span class="line">　　Bundle bundle &#x3D; new Bundle();&#x2F;&#x2F;该类用作数据载体</span><br><span class="line">　　bundle.putString(&quot;name&quot;,&quot;Mike&quot;);</span><br><span class="line">　　intent.putExtras(bundle);&#x2F;&#x2F;可追加额外的数据，key同名的数据会被替换，与Map用法类似</span><br></pre></td></tr></table></figure><p>第二种写法：不通过Bundle,把数据一个个地添加进Intent，这种写法使用起来比较方便，代码更简洁。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent &#x3D; new Intent();</span><br><span class="line">　　intent.putExtra(&quot;name&quot;,&quot;XXX&quot;);&#x2F;&#x2F;注意：不是putExtras，</span><br></pre></td></tr></table></figure><p>取值：</p><p>传完数据后，现在看看如何将Intent和Bundle取出来：<br>　　①直接使用<strong>this.getIntent()</strong> 得到传来的<em>Intent</em>，<br>　　②然后在这个<em>Intent</em>的基础上调用getExtras()得到<strong>Bundle</strong>。<br>　　③根据数据类型可以从<strong>Bundle</strong>中get数据。<br>　　比如</p><p>​        <code>String str=bundle.getString(“Name”);得到键为“Name”的字符串</code></p><p>​        <code>int num=bundle.getInt(“code”);得到键为“code”的整型。</code><br>　　另外一定要注意<u>getExtras</u>和<u>getExtra</u>的区别。带s用于Bundle添加值和取值。</p><p><u><strong>Message.setData同理Intent的Bundle使用</strong></u></p><p>用Bundle向Fragment传递参数不会在Activit被重建时销毁。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fragment的arguments属性</title>
      <link href="/2020/07/06/Fragment%E7%9A%84arguments%E5%B1%9E%E6%80%A7/"/>
      <url>/2020/07/06/Fragment%E7%9A%84arguments%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Fragment的arguments属性</span><br><span class="line">date: 2020-07-06 09:07:20</span><br><span class="line">tags: Fragment查缺补漏</span><br></pre></td></tr></table></figure><h1 id="Arguments（Bundle-bundle）"><a href="#Arguments（Bundle-bundle）" class="headerlink" title="Arguments（Bundle bundle）"></a>Arguments（Bundle bundle）</h1><blockquote><p>凡走过，必留下痕迹。</p></blockquote><p><strong>作用:</strong>Fragment.setArguments(Bundle bundle) 用来传递参数。</p><p>区别于构造方法直接来传递参数。</p><p>当Activity被重新创建的时候（屏幕旋转，后台运行内存过低被回收等等情况），会重构Activity所管理的Fragment，原先Fragment的字段将会全部显消失，使用arguments方法设置的bundle的值会保留下来，而用构造方法来传递的参数会消失。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uniapp打包</title>
      <link href="/2020/07/03/uniapp%E6%89%93%E5%8C%85/"/>
      <url>/2020/07/03/uniapp%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>123</p>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android热修复准备知识</title>
      <link href="/2020/03/10/android%E7%83%AD%E4%BF%AE%E5%A4%8D%E5%87%86%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/10/android%E7%83%AD%E4%BF%AE%E5%A4%8D%E5%87%86%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-ClassLoader详解"><a href="#Android-ClassLoader详解" class="headerlink" title="Android ClassLoader详解"></a>Android ClassLoader详解</h1><p>Android中类加载器有</p><p><strong>BootClassLoader,</strong></p><p><strong>URLClassLoader,</strong><br><strong>PathClassLoader,</strong></p><p><strong>DexClassLoader,</strong></p><p><strong>BaseDexClassLoader,</strong></p><p>等都最终继承自<strong>java.lang.ClassLoader</strong>。</p><h5 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h5><p>还有自定义的类加载器，它们之间的层次关系被称为类加载器的双亲委派模型。</p><p><u>优点</u></p><p><u>类就会随着加载它的ClassLoader一起具备了一种带有优先级的层级关系，通过这种层级关系可以避免类的重复加载，同时也能保证Java核心类库的安全性</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android热修复</title>
      <link href="/2020/03/10/android%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
      <url>/2020/03/10/android%E7%83%AD%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h5 id="热修复技术"><a href="#热修复技术" class="headerlink" title="热修复技术"></a><strong>热修复技术</strong></h5><p>1：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fasialiyazhou%2Farticle%2Fdetails%2F70495589" target="_blank" rel="noopener">qq空间超级补丁</a></p><p>2：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Flmj623565791%2Farticle%2Fdetails%2F54882693" target="_blank" rel="noopener">微信Tinker</a></p><p>3：饿了么Amigo</p><p>4：美团Robust :</p><p>5：360RePlugin :</p><p>6：滴滴出行VirtualAPK 等</p><p><strong>dex文件原理</strong>：单个dex文件，全部最多65536个方法</p><p><strong>dex分包</strong>：app启动时必须用到的类类和这些类文件放在主dex文件，其他放在次dex文件</p><p><strong>类加载器</strong>：java的类加载器是加载class文件，而Android的虚拟机无论是dvm还是art都只能识别dex文件，所以java的类加载器在Android中不适用，Android中的 Java.lang.ClassLoader类也不同与java中的Java.lang.ClassLoader类。</p><p><strong>ClassLoader</strong>层级关系为<em>ClassLoader—&gt;BaseDexClassLoader —&gt;Dex ClassLoader和PathClassLoader，</em></p><p>其中:</p><p><strong><em>PathClassLoader</em></strong>是用来加载Android系统类和应用的类</p><p><strong><u>DexClassLoader</u></strong>支持加载APK、DEX和JAR，也可以从SD卡进行加载 ClassLoader类根据一个指定的类名称，找到或者生成相应的字节码，然后从这些字节码中定义出一个java类 <strong><u>DexClassLoader</u></strong>和<strong><em>PathClassLoader</em></strong>都属于符合双亲委派模型的类加载器（因为它们没有重载loadClass方法）。</p><p><strong>类加载热修复</strong>：当分包完成之后，会形成一个<u>dex包的有序数组</u>，当需要加载类加载器的时候，会从数组中第一个dex包开始加载，<u>直到找到这个类为止</u>，当多个dex包中都有这个文件的时候，就<u>取第一个文件</u>，热修复是通过将已经修复了的bug包打成dex包，并将这个dex包放在<u>有序数组的第一个</u>，当加载类文件的时候，首先会找到修改好的dex包去替换之前存在bug的dex包，而排在后面的存在bug的dex包根据类加载器的双亲委派机制不会被加载，这就是类加载热修复方法的实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇日记</title>
      <link href="/2020/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="日记"><a href="#日记" class="headerlink" title="日记"></a><strong>日记</strong></h1><h6 id="夏花与秋叶"><a href="#夏花与秋叶" class="headerlink" title="夏花与秋叶"></a>夏花与秋叶</h6><p>这边是世界吗？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ji</title>
      <link href="/2020/03/09/ji/"/>
      <url>/2020/03/09/ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/06/hello-world/"/>
      <url>/2020/03/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>aa</title>
      <link href="/aa/index.html"/>
      <url>/aa/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
